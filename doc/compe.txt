*compe.txt*                             Auto completion plugin for nvim.

==============================================================================
CONTENTS                                                    *nvim-compe* *compe*

Concept                               |compe-concept|
Features                              |compe-features|
Prerequisites                         |compe-prerequisites|
Quick Start                           |compe-quickstart|
Functions                             |compe-functions|
  Vimscript                           |compe-viml|
  Lua                                 |compe-lua|
Options                               |compe-options|
Configuration                         |compe-config|
  Source Configuration                |compe-source|
  Builtin Sources                     |compe-sources|
  Example Configuration               |compe-example|
Custom Source                         |compe-custom-source|


==============================================================================
CONCEPT                                                        *compe-concept*

- Lua source & Vim source
- Better matching algorithm
- Support LSP completion features (trigger character, isIncomplete)


==============================================================================
FEATURES                                                      *compe-features*

- VSCode compatible expansion handling
  - rust-analyzer's `Magic Completion`
  - vscode-html-languageserver-bin's closing tag completion
  - Other complex expansion are supported
- Flexible Custom Source API
  - The source can support `documentation` / `resolve` / `confirm`
- Better fuzzy matching algorithm
  - `gu` can be matched `get_user`
  - `fmodify` can be matched `fnamemodify`
  - See `lua/compe/matcher.lua#L57` for implementation details if you're interested
- Buffer source carefully crafted
  - The buffer source will index buffer words by filetype specific regular
    expression if needed


==============================================================================
PREREQUISITES                                            *compe-prerequisites*

Make sure 'completeopt' is set to `menu,menuone,noselect`:
>
  set completeopt=menu,menuone,noselect
<
Using Lua:
>
  vim.o.completeopt = "menu,menuone,noselect"
<

==============================================================================
QUICK START                                                 *compe-quickstart*

Simply define |g:compe| dictionary:
>
  let g:compe = {}
  let g:compe.enabled = v:true
  let g:compe.source = {
    \ 'path': v:true,
    \ 'buffer': v:true,
    \ 'nvim_lsp': v:true,
    \ }
<
...or, if you prefer Lua:
>
  require'compe'.setup({
    enabled = true,
    source = {
      path = true,
      buffer = true,
      nvim_lsp = true,
    },
  })
<
For the list of builtin sources, see |compe-sources|.
For the list of available options, see |compe-config|.

Optionally, you can define mappings:
>
  inoremap <silent><expr> <C-Space> compe#complete()
  inoremap <silent><expr> <CR>      compe#confirm('<CR>')
  inoremap <silent><expr> <C-e>     compe#close('<C-e>')
<
If you use an autopair plugin, like cohama/lexima.vim:
>
  inoremap <silent><expr> <C-Space> compe#complete()
  inoremap <silent><expr> <CR>      compe#confirm(lexima#expand('<LT>CR>', 'i'))
  inoremap <silent><expr> <C-e>     compe#close('<C-e>')
<
For Raimondi/delimitMate:
>
  inoremap <silent><expr> <C-Space> compe#complete()
  inoremap <silent><expr> <CR>      compe#confirm({'keys': "\<Plug>delimitMateCR", 'mode': ''})
  inoremap <silent><expr> <C-e>     compe#close('<C-e>')
<

==============================================================================
FUNCTIONS                                                    *compe-functions*

|nvim-compe| is under active development, breaking changes may occur.

------------------------------------------------------------------------------
VIMSCRIPT                                                         *compe-viml*

compe#setup({config}[, {bufnr}])                               *compe#setup()*
    Setup user configuration.

    {config} is a dictionary. See |compe-config| for the list of available
    options.

    If {bufnr} is provided, sets up completion for buffer {bufnr}, or 0 for
    current buffer. Missing options will be inherited from global config.
>
    " Global configuration
    call compe#setup({ ... })

    " Buffer configuration
    autocmd FileType c,cpp call compe#setup({ ... }, 0)
<
compe#register_source({name}, {source})              *compe#register_source()*
    Register source.
    Returns source id.
    See |compe-custom-source|.

compe#unregister_source({id})                      *compe#unregister_source()*
    Unregister source.
>
    let l:id = compe#register_source('name', s:source)
    call compe#unregister_source(l:id)
<
compe#complete()                                            *compe#complete()*
    Invoke completion.

compe#confirm([{fallback}])                                  *compe#confirm()*
    Confirm selected item.
    {fallback} is optional fallback key.
>
    call compe#confirm('<C-y>')
<
compe#close([{fallback}])                                      *compe#close()*
    Close completion menu.
    {fallback} is optional fallback key.
>
    call compe#close('<C-e>')
<
compe#helper#*()                                                *compe#helper*
    Source helpers.
>

------------------------------------------------------------------------------
LUA                                                                *compe-lua*

compe.setup({config}[, {bufnr}])                               *compe.setup()*
    Setup user configuration.
    See |compe#setup()| and |compe-config|.
>
    -- Global configuration
    require'compe'.setup({ ... })

    -- Buffer configuration
    local on_attach = function()
      require'compe'.setup({ ... }, 0)
    end
<
compe.register_source({name}, {source})              *compe.register_source()*
    See |compe#register_source()|.

compe.unregister_source({id})                      *compe.unregister_source()*
    See |compe#unregister_source()|.
>
    local id = require'compe'.register_source(name, source)
    require'compe'.unregister_source(id)
<
compe.helper.*                                                  *compe.helper*
    Source helpers.


==============================================================================
OPTIONS                                                        *compe-options*

g:compe                                                              *g:compe*
    Global configuration.
    A dictionary, see |compe-config| for the list of available options.
>
    let g:compe = {}
    let g:compe.enabled = v:true
    let g:compe.source = {
      \ 'path': v:true,
      \ 'buffer': v:true,
      \ 'nvim_lsp': v:true,
      \ }
<

==============================================================================
CONFIGURATION                                                   *compe-config*

Configuration is defined as dictionary, that can be passed to |compe#setup()|
and |compe.setup()| functions, or defined as |g:compe| variable.
The `source` option is required, but others may be omitted.

enabled ~
    Enable completion.
      Type: |Boolean|
      Default: true

autocomplete ~
    Open the popup menu automatically.
      Type: |Boolean|
      Default: true

debug ~
    Display debug info.
      Type: |Boolean|
      Default: false

min_length ~
    Minimal characters length to trigger completion.
      Type: |Number|
      Default: 1

preselect ~
    Preselect behaviour.
      Type: |String|
      Accepted values:
        "enable"      Preselect completion item only if the source told
                      nvim-compe to do so. Eg. completion from gopls.
        "disable"     Never preselect completion item regardless of source
        "always"      Always preselect completion item regardless of source
      Default: "enable"

throttle_time ~
    Throttle completion menu.
      Type: |Number|
      Default: 80

source_timeout ~
    Timeout for nvim-compe to get completion items.
      Type: |Number|
      Default: 200

incomplete_delay ~
    Delay for LSP's isIncomplete.
      Type: |Number|
      Default: 400

allow_prefix_unmatch ~
    TODO

source ~
    Source configuration. Required.
      Type: |Dictionary| of:
        Key: |String|
          Source name.
          For the list of builtin sources, see |compe-sources|.
        Value: |Boolean| | |Dictionary|
          Source configuration.
          If true, the source is enabled with default options.
          If false, the source is disabled.
          For dictionary, see |compe-source| for the list of source options.


------------------------------------------------------------------------------
SOURCE CONFIGURATION                                            *compe-source*

Source configuration is defined as dictionary with items:

priority ~
    Specify source priority.
      Type: |Number|

filetypes ~
    List of enabled filetypes for this source.
      Type: |List|

ignored_filetypes ~
    List of ignored filetypes for this source.
      Type: |List|

sort ~
    Specify source is sortable or not.
      Type: |Boolean|

dup ~
    Specify source candidates can have the same word another item.
      Type: |Boolean|

menu ~
    Specify item's menu (see |complete-items|)
      Type: |String|


------------------------------------------------------------------------------
BUILTIN SOURCES                                                *compe-sources*

Common: ~
path                Path completion.
buffer              Buffer completion.
tags                Tag completion.
spell               Spell file completion.
calc                Lua math expressions.

Neovim-specific: ~
nvim_lsp            Neovim's builtin LSP completion.
nvim_lua            Neovim's Lua "stdlib" completion.

External plugins: ~
Completion for external plugins.
Make sure you have the corresponding plugin installed.

vim_lsp             vim-lsp completion.
lamp                vim-lamp completion.
vsnip               vim-vsnip completion.
ultisnips           UltiSnips completion.
snippets_nvim       snippets.nvim completion.


------------------------------------------------------------------------------
EXAMPLE CONFIGURATION                                          *compe-example*

Both Vimscript and Lua examples are using default values.

Vimscript:
>
  let g:compe = {}
  let g:compe.enabled = v:true
  let g:compe.autocomplete = v:true
  let g:compe.debug = v:false
  let g:compe.min_length = 1
  let g:compe.preselect = 'enable'
  let g:compe.throttle_time = 80
  let g:compe.source_timeout = 200
  let g:compe.incomplete_delay = 400
  let g:compe.allow_prefix_unmatch = v:false

  let g:compe.source = {}
  let g:compe.source.path = v:true
  let g:compe.source.buffer = v:true
  let g:compe.source.calc = v:true
  let g:compe.source.vsnip = v:true
  let g:compe.source.nvim_lsp = v:true
  let g:compe.source.nvim_lua = v:true
  let g:compe.source.spell = v:true
  let g:compe.source.snippets_nvim = v:true
<
Lua:
>
  require'compe'.setup {
    enabled = true;
    autocomplete = true;
    debug = false;
    min_length = 1;
    preselect = 'enable';
    throttle_time = 80;
    source_timeout = 200;
    incomplete_delay = 400;
    allow_prefix_unmatch = false;

    source = {
      path = true;
      buffer = true;
      calc = true;
      vsnip = true;
      nvim_lsp = true;
      nvim_lua = true;
      spell = true;
      snippets_nvim = true;
    };
  }
>

==============================================================================
CUSTOM SOURCE                                            *compe-custom-source*

Source is defined as dictionary with items:

get_metadata ~
    This function should return the default source configuration.
    See |compe-source| section.

determine ~
    This function should return dict as:
>
    { keyword_pattern_offset   = 1-origin number;
      trigger_character_offset = 1-origin number; }
<
    If this function returns empty, nvim-compe will do nothing.

complete ~
    This function should callback the completed items as:
>
    args.callback({ items = items })
<
    To stop the competion process, call `args.abort()`.

documentation ~
    Optional.
    You can provide documentation for selected items.
    See nvim_lsp or snippets.nvim source for examples.

confirm ~
    Optional.
    A function that gets executed when you confirm a completion item.
    Useful for snippets that needs to be expanded.
    See vsnip or snippets.nvim source for examples.


You can see example on https://github.com/kristijanhusak/vim-dadbod-completion

- implementation
  https://github.com/kristijanhusak/vim-dadbod-completion/blob/master/autoload/vim_dadbod_completion/compe.vim
- registration
  https://github.com/kristijanhusak/vim-dadbod-completion/blob/master/after/plugin/vim_dadbod_completion.vim#L4


==============================================================================
vim:tw=78:ts=4:et:ft=help:norl:
